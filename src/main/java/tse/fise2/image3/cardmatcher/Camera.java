package tse.fise2.image3.cardmatcher;



import java.awt.Label;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;

import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.TextInputDialog;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

public class Camera{

    // a timer for acquiring the video stream
    private ScheduledExecutorService timer;
    // the OpenCV object that realizes the video capture
    private VideoCapture capture = new VideoCapture();
    // a flag to change the button behavior
    private boolean cameraActive = false;
    // the id of the camera to be used
    private static int cameraId = 0;
    // learning mode
    private boolean learningmode;
    //
    private Label label = new Label();
    //
    private Mat frame = new Mat();

    public void openCamera(ImageView crframe, Button btn) {
        // TODO Autogenerated
        if (!this.cameraActive)
        {
            // start the video capture
            this.capture.open(cameraId);

            // is the video stream available?
            if (this.capture.isOpened())
            {
                this.cameraActive = true;

                // grab a frame every 33 ms (30 frames/sec)
                Runnable frameGrabber = new Runnable() {

                    @Override
                    public void run()
                    {
                        // grab and process a single frame
                        frame = grabFrame();
                        if (learningmode) {
                            // rectangle in the frame
                            Imgproc.rectangle(frame,new Point(200, 80), new Point(440, 400), new Scalar(0, 0, 255), 2);
                        }

                        // convert and show the frame
                        MatOfByte buffer = new MatOfByte();
                        Imgcodecs.imencode(".jpg", frame, buffer);
                        // à revoir car pas trop bien compris
                        Image imageToShow = new Image(new ByteArrayInputStream(buffer.toArray()));
                        Platform.runLater(new Runnable() {
                            @Override public void run() {
                                crframe.setImage(imageToShow);
                            }
                        });
                    }
                };
                // à revoir aussi pour bien comprendre
                this.timer = Executors.newSingleThreadScheduledExecutor();
                this.timer.scheduleAtFixedRate(frameGrabber, 0, 33, TimeUnit.MILLISECONDS);

                // update the button content
                if (this.learningmode) {
                    btn.setText("Capture");
                }

                // close webcam when no capture taken
                Stage stage =(Stage)(btn.getScene().getWindow());
                stage.setOnCloseRequest((new EventHandler<WindowEvent>() {
                    public void handle(WindowEvent we)
                    {
                        stopAcquisition();
                    }
                }));
            }
            else
            {
                // log the error
                System.err.println("Impossible to open the camera connection...");
            }
        }
        else
        {
            // the camera is not active at this point
            this.cameraActive = false;

            // stop the timer
            this.stopAcquisition();
            if (this.learningmode) {
                // update again the button content
                btn.setText("Restart Camera");

                // Name the capture and save it in a folder
                this.showInputTextDialog();
                System.out.println(this.label.getText());
            }
        }
    }

    public static void CreateFolder(String x) {
        File dossier = new File(x);
        boolean res = dossier.mkdir();
        if (res) {
            System.out.println("Le dossier a été créé.");
        } else {
            System.out.println("Le dossier existe déja.");
        }
    }

    public void saveImage() {
        String userHome = System.getProperty("user.dir"); // return c:\Users\${current_user_name}
        //enregistrer dans le projet
        String folder = userHome + "/apprentissage";
        CreateFolder(folder);
        String pictureName = this.label.getText();
        String file = folder + "/" + pictureName + "test.jpg";
        Rect rectCrop = new Rect(new Point(200, 80), new Point(440, 400));
        Mat crop_frame = new Mat(frame,rectCrop);
        // Saving the image in the folder
        Imgcodecs.imwrite(file, crop_frame);
    }

    private void showInputTextDialog() {
        TextInputDialog dialog = new TextInputDialog("Write here");
        dialog.setTitle("Save picture");
        dialog.setHeaderText("Enter the name of the picture ");
        dialog.setContentText("Name:");

        Optional<String> result = dialog.showAndWait();

        result.ifPresent(name -> {
            this.label.setText(name);
            this.saveImage();
        });
    }

    private Mat grabFrame() {
        // init everything
        Mat frame = new Mat();

        // check if the capture is open
        if (this.capture.isOpened()) {
            try {
                // read the current frame
                this.capture.read(frame);

                // if the frame is not empty, process it
                if (!frame.empty()) {
                    //mettre en nuances de gris
                    //Imgproc.cvtColor(frame, frame, Imgproc.COLOR_BGR5652RGB);
                }
            } catch (Exception e) {
                // log the error
                System.err.println("Exception during the image elaboration: " + e);
            }
        }
        return frame;
    }

    public void stopAcquisition() {
        if (this.timer != null && !this.timer.isShutdown()) {
            try {
                // stop the timer
                this.timer.shutdown();
                this.timer.awaitTermination(33, TimeUnit.MILLISECONDS);
                this.capture.release();
            } catch (InterruptedException e) {
                // log any exception
                System.err.println("Exception in stopping the frame capture, trying to release the camera now... " + e);
            }
        }
        if (this.capture.isOpened()) {
            // release the camera
            this.capture.release();
        }
    }

    public boolean isCameraActive() {
        return cameraActive;
    }

    public void setCameraActive(boolean cameraActive) {
        this.cameraActive = cameraActive;
    }

    public boolean isLearningmode() {
        return learningmode;
    }

    public void setLearningmode(boolean learningmode) {
        this.learningmode = learningmode;
    }


}

